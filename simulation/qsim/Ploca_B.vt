// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/06/2025 18:29:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Ploca_B
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Ploca_B_vlg_sample_tst(
	GPIO_1,
	iCLK_50,
	iSW,
	sampler_tx
);
input [31:0] GPIO_1;
input  iCLK_50;
input [6:0] iSW;
output sampler_tx;

reg sample;
time current_time;
always @(GPIO_1 or iCLK_50 or iSW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Ploca_B_vlg_check_tst (
	GPIO_1,
	oHEX0_D,
	oHEX0_DP,
	oHEX1_D,
	oHEX1_DP,
	oHEX2_D,
	oHEX2_DP,
	oHEX3_D,
	oHEX3_DP,
	oHEX4_D,
	oHEX4_DP,
	oHEX5_D,
	oHEX5_DP,
	oHEX6_D,
	oHEX6_DP,
	oHEX7_D,
	oHEX7_DP,
	oLEDG,
	oLEDR,
	sampler_rx
);
input [31:0] GPIO_1;
input [6:0] oHEX0_D;
input  oHEX0_DP;
input [6:0] oHEX1_D;
input  oHEX1_DP;
input [6:0] oHEX2_D;
input  oHEX2_DP;
input [6:0] oHEX3_D;
input  oHEX3_DP;
input [6:0] oHEX4_D;
input  oHEX4_DP;
input [6:0] oHEX5_D;
input  oHEX5_DP;
input [6:0] oHEX6_D;
input  oHEX6_DP;
input [6:0] oHEX7_D;
input  oHEX7_DP;
input [7:0] oLEDG;
input [17:0] oLEDR;
input sampler_rx;

reg [31:0] GPIO_1_expected;
reg [6:0] oHEX0_D_expected;
reg  oHEX0_DP_expected;
reg [6:0] oHEX1_D_expected;
reg  oHEX1_DP_expected;
reg [6:0] oHEX2_D_expected;
reg  oHEX2_DP_expected;
reg [6:0] oHEX3_D_expected;
reg  oHEX3_DP_expected;
reg [6:0] oHEX4_D_expected;
reg  oHEX4_DP_expected;
reg [6:0] oHEX5_D_expected;
reg  oHEX5_DP_expected;
reg [6:0] oHEX6_D_expected;
reg  oHEX6_DP_expected;
reg [6:0] oHEX7_D_expected;
reg  oHEX7_DP_expected;
reg [7:0] oLEDG_expected;
reg [17:0] oLEDR_expected;

reg [31:0] GPIO_1_prev;
reg [6:0] oHEX0_D_prev;
reg  oHEX0_DP_prev;
reg [6:0] oHEX1_D_prev;
reg  oHEX1_DP_prev;
reg [6:0] oHEX2_D_prev;
reg  oHEX2_DP_prev;
reg [6:0] oHEX3_D_prev;
reg  oHEX3_DP_prev;
reg [6:0] oHEX4_D_prev;
reg  oHEX4_DP_prev;
reg [6:0] oHEX5_D_prev;
reg  oHEX5_DP_prev;
reg [6:0] oHEX6_D_prev;
reg  oHEX6_DP_prev;
reg [6:0] oHEX7_D_prev;
reg  oHEX7_DP_prev;
reg [7:0] oLEDG_prev;
reg [17:0] oLEDR_prev;

reg [7:0] oLEDG_expected_prev;
reg [17:0] oLEDR_expected_prev;

reg [7:0] last_oLEDG_exp;
reg [17:0] last_oLEDR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	GPIO_1_prev = GPIO_1;
	oHEX0_D_prev = oHEX0_D;
	oHEX0_DP_prev = oHEX0_DP;
	oHEX1_D_prev = oHEX1_D;
	oHEX1_DP_prev = oHEX1_DP;
	oHEX2_D_prev = oHEX2_D;
	oHEX2_DP_prev = oHEX2_DP;
	oHEX3_D_prev = oHEX3_D;
	oHEX3_DP_prev = oHEX3_DP;
	oHEX4_D_prev = oHEX4_D;
	oHEX4_DP_prev = oHEX4_DP;
	oHEX5_D_prev = oHEX5_D;
	oHEX5_DP_prev = oHEX5_DP;
	oHEX6_D_prev = oHEX6_D;
	oHEX6_DP_prev = oHEX6_DP;
	oHEX7_D_prev = oHEX7_D;
	oHEX7_DP_prev = oHEX7_DP;
	oLEDG_prev = oLEDG;
	oLEDR_prev = oLEDR;
end

// update expected /o prevs

always @(trigger)
begin
	oLEDG_expected_prev = oLEDG_expected;
	oLEDR_expected_prev = oLEDR_expected;
end



// expected oLEDG[7]
initial
begin
	oLEDG_expected[7] = 1'bX;
end 

// expected oLEDG[6]
initial
begin
	oLEDG_expected[6] = 1'bX;
end 

// expected oLEDG[5]
initial
begin
	oLEDG_expected[5] = 1'bX;
end 

// expected oLEDG[4]
initial
begin
	oLEDG_expected[4] = 1'bX;
end 

// expected oLEDG[3]
initial
begin
	oLEDG_expected[3] = 1'bX;
end 

// expected oLEDG[2]
initial
begin
	oLEDG_expected[2] = 1'bX;
end 

// expected oLEDG[1]
initial
begin
	oLEDG_expected[1] = 1'bX;
end 

// expected oLEDG[0]
initial
begin
	oLEDG_expected[0] = 1'bX;
end 
// expected oLEDR[ 17 ]
initial
begin
	oLEDR_expected[17] = 1'bX;
end 
// expected oLEDR[ 16 ]
initial
begin
	oLEDR_expected[16] = 1'bX;
end 
// expected oLEDR[ 15 ]
initial
begin
	oLEDR_expected[15] = 1'bX;
end 
// expected oLEDR[ 14 ]
initial
begin
	oLEDR_expected[14] = 1'bX;
end 
// expected oLEDR[ 13 ]
initial
begin
	oLEDR_expected[13] = 1'bX;
end 
// expected oLEDR[ 12 ]
initial
begin
	oLEDR_expected[12] = 1'bX;
end 
// expected oLEDR[ 11 ]
initial
begin
	oLEDR_expected[11] = 1'bX;
end 
// expected oLEDR[ 10 ]
initial
begin
	oLEDR_expected[10] = 1'bX;
end 
// expected oLEDR[ 9 ]
initial
begin
	oLEDR_expected[9] = 1'bX;
end 
// expected oLEDR[ 8 ]
initial
begin
	oLEDR_expected[8] = 1'bX;
end 
// expected oLEDR[ 7 ]
initial
begin
	oLEDR_expected[7] = 1'bX;
end 
// expected oLEDR[ 6 ]
initial
begin
	oLEDR_expected[6] = 1'bX;
end 
// expected oLEDR[ 5 ]
initial
begin
	oLEDR_expected[5] = 1'bX;
end 
// expected oLEDR[ 4 ]
initial
begin
	oLEDR_expected[4] = 1'bX;
end 
// expected oLEDR[ 3 ]
initial
begin
	oLEDR_expected[3] = 1'bX;
end 
// expected oLEDR[ 2 ]
initial
begin
	oLEDR_expected[2] = 1'bX;
end 
// expected oLEDR[ 1 ]
initial
begin
	oLEDR_expected[1] = 1'bX;
end 
// expected oLEDR[ 0 ]
initial
begin
	oLEDR_expected[0] = 1'bX;
end 
// generate trigger
always @(GPIO_1_expected or GPIO_1 or oHEX0_D_expected or oHEX0_D or oHEX0_DP_expected or oHEX0_DP or oHEX1_D_expected or oHEX1_D or oHEX1_DP_expected or oHEX1_DP or oHEX2_D_expected or oHEX2_D or oHEX2_DP_expected or oHEX2_DP or oHEX3_D_expected or oHEX3_D or oHEX3_DP_expected or oHEX3_DP or oHEX4_D_expected or oHEX4_D or oHEX4_DP_expected or oHEX4_DP or oHEX5_D_expected or oHEX5_D or oHEX5_DP_expected or oHEX5_DP or oHEX6_D_expected or oHEX6_D or oHEX6_DP_expected or oHEX6_DP or oHEX7_D_expected or oHEX7_D or oHEX7_DP_expected or oHEX7_DP or oLEDG_expected or oLEDG or oLEDR_expected or oLEDR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected GPIO_1 = %b | expected oHEX0_D = %b | expected oHEX0_DP = %b | expected oHEX1_D = %b | expected oHEX1_DP = %b | expected oHEX2_D = %b | expected oHEX2_DP = %b | expected oHEX3_D = %b | expected oHEX3_DP = %b | expected oHEX4_D = %b | expected oHEX4_DP = %b | expected oHEX5_D = %b | expected oHEX5_DP = %b | expected oHEX6_D = %b | expected oHEX6_DP = %b | expected oHEX7_D = %b | expected oHEX7_DP = %b | expected oLEDG = %b | expected oLEDR = %b | ",GPIO_1_expected_prev,oHEX0_D_expected_prev,oHEX0_DP_expected_prev,oHEX1_D_expected_prev,oHEX1_DP_expected_prev,oHEX2_D_expected_prev,oHEX2_DP_expected_prev,oHEX3_D_expected_prev,oHEX3_DP_expected_prev,oHEX4_D_expected_prev,oHEX4_DP_expected_prev,oHEX5_D_expected_prev,oHEX5_DP_expected_prev,oHEX6_D_expected_prev,oHEX6_DP_expected_prev,oHEX7_D_expected_prev,oHEX7_DP_expected_prev,oLEDG_expected_prev,oLEDR_expected_prev);
	$display("| real GPIO_1 = %b | real oHEX0_D = %b | real oHEX0_DP = %b | real oHEX1_D = %b | real oHEX1_DP = %b | real oHEX2_D = %b | real oHEX2_DP = %b | real oHEX3_D = %b | real oHEX3_DP = %b | real oHEX4_D = %b | real oHEX4_DP = %b | real oHEX5_D = %b | real oHEX5_DP = %b | real oHEX6_D = %b | real oHEX6_DP = %b | real oHEX7_D = %b | real oHEX7_DP = %b | real oLEDG = %b | real oLEDR = %b | ",GPIO_1_prev,oHEX0_D_prev,oHEX0_DP_prev,oHEX1_D_prev,oHEX1_DP_prev,oHEX2_D_prev,oHEX2_DP_prev,oHEX3_D_prev,oHEX3_DP_prev,oHEX4_D_prev,oHEX4_DP_prev,oHEX5_D_prev,oHEX5_DP_prev,oHEX6_D_prev,oHEX6_DP_prev,oHEX7_D_prev,oHEX7_DP_prev,oLEDG_prev,oLEDR_prev);
`endif
	if (
		( oLEDG_expected_prev[0] !== 1'bx ) && ( oLEDG_prev[0] !== oLEDG_expected_prev[0] )
		&& ((oLEDG_expected_prev[0] !== last_oLEDG_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_oLEDG_exp[0] = oLEDG_expected_prev[0];
	end
	if (
		( oLEDG_expected_prev[1] !== 1'bx ) && ( oLEDG_prev[1] !== oLEDG_expected_prev[1] )
		&& ((oLEDG_expected_prev[1] !== last_oLEDG_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_oLEDG_exp[1] = oLEDG_expected_prev[1];
	end
	if (
		( oLEDG_expected_prev[2] !== 1'bx ) && ( oLEDG_prev[2] !== oLEDG_expected_prev[2] )
		&& ((oLEDG_expected_prev[2] !== last_oLEDG_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_oLEDG_exp[2] = oLEDG_expected_prev[2];
	end
	if (
		( oLEDG_expected_prev[3] !== 1'bx ) && ( oLEDG_prev[3] !== oLEDG_expected_prev[3] )
		&& ((oLEDG_expected_prev[3] !== last_oLEDG_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_oLEDG_exp[3] = oLEDG_expected_prev[3];
	end
	if (
		( oLEDG_expected_prev[4] !== 1'bx ) && ( oLEDG_prev[4] !== oLEDG_expected_prev[4] )
		&& ((oLEDG_expected_prev[4] !== last_oLEDG_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_oLEDG_exp[4] = oLEDG_expected_prev[4];
	end
	if (
		( oLEDG_expected_prev[5] !== 1'bx ) && ( oLEDG_prev[5] !== oLEDG_expected_prev[5] )
		&& ((oLEDG_expected_prev[5] !== last_oLEDG_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_oLEDG_exp[5] = oLEDG_expected_prev[5];
	end
	if (
		( oLEDG_expected_prev[6] !== 1'bx ) && ( oLEDG_prev[6] !== oLEDG_expected_prev[6] )
		&& ((oLEDG_expected_prev[6] !== last_oLEDG_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_oLEDG_exp[6] = oLEDG_expected_prev[6];
	end
	if (
		( oLEDG_expected_prev[7] !== 1'bx ) && ( oLEDG_prev[7] !== oLEDG_expected_prev[7] )
		&& ((oLEDG_expected_prev[7] !== last_oLEDG_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_oLEDG_exp[7] = oLEDG_expected_prev[7];
	end
	if (
		( oLEDR_expected_prev[0] !== 1'bx ) && ( oLEDR_prev[0] !== oLEDR_expected_prev[0] )
		&& ((oLEDR_expected_prev[0] !== last_oLEDR_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[0] = oLEDR_expected_prev[0];
	end
	if (
		( oLEDR_expected_prev[1] !== 1'bx ) && ( oLEDR_prev[1] !== oLEDR_expected_prev[1] )
		&& ((oLEDR_expected_prev[1] !== last_oLEDR_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[1] = oLEDR_expected_prev[1];
	end
	if (
		( oLEDR_expected_prev[2] !== 1'bx ) && ( oLEDR_prev[2] !== oLEDR_expected_prev[2] )
		&& ((oLEDR_expected_prev[2] !== last_oLEDR_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[2] = oLEDR_expected_prev[2];
	end
	if (
		( oLEDR_expected_prev[3] !== 1'bx ) && ( oLEDR_prev[3] !== oLEDR_expected_prev[3] )
		&& ((oLEDR_expected_prev[3] !== last_oLEDR_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[3] = oLEDR_expected_prev[3];
	end
	if (
		( oLEDR_expected_prev[4] !== 1'bx ) && ( oLEDR_prev[4] !== oLEDR_expected_prev[4] )
		&& ((oLEDR_expected_prev[4] !== last_oLEDR_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[4] = oLEDR_expected_prev[4];
	end
	if (
		( oLEDR_expected_prev[5] !== 1'bx ) && ( oLEDR_prev[5] !== oLEDR_expected_prev[5] )
		&& ((oLEDR_expected_prev[5] !== last_oLEDR_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[5] = oLEDR_expected_prev[5];
	end
	if (
		( oLEDR_expected_prev[6] !== 1'bx ) && ( oLEDR_prev[6] !== oLEDR_expected_prev[6] )
		&& ((oLEDR_expected_prev[6] !== last_oLEDR_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[6] = oLEDR_expected_prev[6];
	end
	if (
		( oLEDR_expected_prev[7] !== 1'bx ) && ( oLEDR_prev[7] !== oLEDR_expected_prev[7] )
		&& ((oLEDR_expected_prev[7] !== last_oLEDR_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[7] = oLEDR_expected_prev[7];
	end
	if (
		( oLEDR_expected_prev[8] !== 1'bx ) && ( oLEDR_prev[8] !== oLEDR_expected_prev[8] )
		&& ((oLEDR_expected_prev[8] !== last_oLEDR_exp[8]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[8] = oLEDR_expected_prev[8];
	end
	if (
		( oLEDR_expected_prev[9] !== 1'bx ) && ( oLEDR_prev[9] !== oLEDR_expected_prev[9] )
		&& ((oLEDR_expected_prev[9] !== last_oLEDR_exp[9]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[9] = oLEDR_expected_prev[9];
	end
	if (
		( oLEDR_expected_prev[10] !== 1'bx ) && ( oLEDR_prev[10] !== oLEDR_expected_prev[10] )
		&& ((oLEDR_expected_prev[10] !== last_oLEDR_exp[10]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[10] = oLEDR_expected_prev[10];
	end
	if (
		( oLEDR_expected_prev[11] !== 1'bx ) && ( oLEDR_prev[11] !== oLEDR_expected_prev[11] )
		&& ((oLEDR_expected_prev[11] !== last_oLEDR_exp[11]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[11] = oLEDR_expected_prev[11];
	end
	if (
		( oLEDR_expected_prev[12] !== 1'bx ) && ( oLEDR_prev[12] !== oLEDR_expected_prev[12] )
		&& ((oLEDR_expected_prev[12] !== last_oLEDR_exp[12]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[12] = oLEDR_expected_prev[12];
	end
	if (
		( oLEDR_expected_prev[13] !== 1'bx ) && ( oLEDR_prev[13] !== oLEDR_expected_prev[13] )
		&& ((oLEDR_expected_prev[13] !== last_oLEDR_exp[13]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[13] = oLEDR_expected_prev[13];
	end
	if (
		( oLEDR_expected_prev[14] !== 1'bx ) && ( oLEDR_prev[14] !== oLEDR_expected_prev[14] )
		&& ((oLEDR_expected_prev[14] !== last_oLEDR_exp[14]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[14] = oLEDR_expected_prev[14];
	end
	if (
		( oLEDR_expected_prev[15] !== 1'bx ) && ( oLEDR_prev[15] !== oLEDR_expected_prev[15] )
		&& ((oLEDR_expected_prev[15] !== last_oLEDR_exp[15]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[15] = oLEDR_expected_prev[15];
	end
	if (
		( oLEDR_expected_prev[16] !== 1'bx ) && ( oLEDR_prev[16] !== oLEDR_expected_prev[16] )
		&& ((oLEDR_expected_prev[16] !== last_oLEDR_exp[16]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[16] = oLEDR_expected_prev[16];
	end
	if (
		( oLEDR_expected_prev[17] !== 1'bx ) && ( oLEDR_prev[17] !== oLEDR_expected_prev[17] )
		&& ((oLEDR_expected_prev[17] !== last_oLEDR_exp[17]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_oLEDR_exp[17] = oLEDR_expected_prev[17];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Ploca_B_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] treg_GPIO_1;
reg iCLK_50;
reg [6:0] iSW;
// wires                                               
wire [31:0] GPIO_1;
wire [6:0] oHEX0_D;
wire oHEX0_DP;
wire [6:0] oHEX1_D;
wire oHEX1_DP;
wire [6:0] oHEX2_D;
wire oHEX2_DP;
wire [6:0] oHEX3_D;
wire oHEX3_DP;
wire [6:0] oHEX4_D;
wire oHEX4_DP;
wire [6:0] oHEX5_D;
wire oHEX5_DP;
wire [6:0] oHEX6_D;
wire oHEX6_DP;
wire [6:0] oHEX7_D;
wire oHEX7_DP;
wire [7:0] oLEDG;
wire [17:0] oLEDR;

wire sampler;                             

// assign statements (if any)                          
assign GPIO_1 = treg_GPIO_1;
Ploca_B i1 (
// port map - connection between master ports and signals/registers   
	.GPIO_1(GPIO_1),
	.iCLK_50(iCLK_50),
	.iSW(iSW),
	.oHEX0_D(oHEX0_D),
	.oHEX0_DP(oHEX0_DP),
	.oHEX1_D(oHEX1_D),
	.oHEX1_DP(oHEX1_DP),
	.oHEX2_D(oHEX2_D),
	.oHEX2_DP(oHEX2_DP),
	.oHEX3_D(oHEX3_D),
	.oHEX3_DP(oHEX3_DP),
	.oHEX4_D(oHEX4_D),
	.oHEX4_DP(oHEX4_DP),
	.oHEX5_D(oHEX5_D),
	.oHEX5_DP(oHEX5_DP),
	.oHEX6_D(oHEX6_D),
	.oHEX6_DP(oHEX6_DP),
	.oHEX7_D(oHEX7_D),
	.oHEX7_DP(oHEX7_DP),
	.oLEDG(oLEDG),
	.oLEDR(oLEDR)
);

// iSW[0]
initial
begin
	iSW[0] = 1'b1;
end 

// iSW[2]
initial
begin
	iSW[2] = 1'b0;
end 

// iSW[3]
initial
begin
	iSW[3] = 1'b0;
end 

// iSW[4]
initial
begin
	iSW[4] = 1'b0;
	iSW[4] = #110000 1'b1;
	iSW[4] = #30000 1'b0;
end 

Ploca_B_vlg_sample_tst tb_sample (
	.GPIO_1(GPIO_1),
	.iCLK_50(iCLK_50),
	.iSW(iSW),
	.sampler_tx(sampler)
);

Ploca_B_vlg_check_tst tb_out(
	.GPIO_1(GPIO_1),
	.oHEX0_D(oHEX0_D),
	.oHEX0_DP(oHEX0_DP),
	.oHEX1_D(oHEX1_D),
	.oHEX1_DP(oHEX1_DP),
	.oHEX2_D(oHEX2_D),
	.oHEX2_DP(oHEX2_DP),
	.oHEX3_D(oHEX3_D),
	.oHEX3_DP(oHEX3_DP),
	.oHEX4_D(oHEX4_D),
	.oHEX4_DP(oHEX4_DP),
	.oHEX5_D(oHEX5_D),
	.oHEX5_DP(oHEX5_DP),
	.oHEX6_D(oHEX6_D),
	.oHEX6_DP(oHEX6_DP),
	.oHEX7_D(oHEX7_D),
	.oHEX7_DP(oHEX7_DP),
	.oLEDG(oLEDG),
	.oLEDR(oLEDR),
	.sampler_rx(sampler)
);
endmodule

